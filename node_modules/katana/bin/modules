#!/usr/bin/env node

var Path = require('path');
var Fs   = require('fs');

var request = require('request');
var async   = require('async');
var semver  = require('semver');

var zlib = require('zlib');
var tar  = require('tar');
var gzip = zlib.createUnzip();

var inherits = require('util').inherits;
var spawn    = require('child_process').spawn;
var utils    = require('../lib/utils');
var confirm  = utils.confirm;
var check    = utils.validator;

var fs     = require('../lib/fs');
var mkdir  = fs.mkdir;
var copy   = fs.copy;
var walk   = fs.walk;
var find   = fs.find;
var move   = fs.move;
var remove = fs.remove;

require('colors');

var node    = process.execPath;
var root    = process.cwd() + Path.sep;
var modRoot = Path.join(__dirname, '..') + Path.sep;
var isWin   = process.platform === 'win32';
var eol     = require('os').EOL;
var sep     = Path.sep;

var modules = require('../modules');

function AppError(message) {
  Error.apply(this, arguments);
  this.name = 'AppError';
  this.message = message || '';
}
inherits(AppError, Error);

process.on('uncaughtException', function(error) {
  if (error instanceof AppError) {
    console.error('  Error:'.red, error.message);
  } else {
    console.error(error.stack || error.message || error);
  }
  //process.stdin.pause();
  process.exit(1);
});

var App = require('commander');

App.command('list')
.description('list available modules')
.action(function() {
  var meta = {
    total: Object.keys(modules).length,
    installed: 0,
    enabled: 0
  };

  var pack = null;
  try {
    pack = (require(Path.join(root, 'package.json'))).katana;
  } catch(error) {}

  var i = 0;
  for (var name in modules) {
    var module    = modules[name];
    var installed = pack && pack.modules[name]!== undefined;
    var enabled   = pack && pack.modules[name]!==undefined && pack.modules[name].enabled;

    module.tags.reverse();
    installed && meta.installed++;
    enabled && meta.enabled++;

    var url = module.url || (['https://github.com', module.github.username, module.github.repository, 'tarball', module.tags[0] || 'master'].join('/'));

    console.log('\n  #'.grey + ++i, name, (installed ? '■installed'.blue : '') + (enabled ? ' ■enabled'.green : ''));
    console.log('      title:'.grey, module.description);
    console.log('     author:'.grey, module.author.name, '<'+ module.author.email +'>');
    console.log('        url:'.grey, url);
    console.log('       tags:'.grey, module.tags.length ? module.tags.join(' ■ ') : 'master');
  }

  // meta.total && console.log('\n  ■Total:'.blue + meta.total, '■Installed:'.magenta + meta.installed, '■Enabled:'.green + meta.enabled);

  console.log(!meta.total ? '\n  **There are no available modules**\n'.grey : '');
  !meta.total && console.log('  Tip:'.blue +' run "'.grey +'katana modules update'.green +'" - to update modules list and info.'.grey, '\n');
});

App.command('search <query>')
.description('search modules')
.action(function(query) {
  var meta = {
    total: 0,
    installed: 0,
    enabled: 0
  };

  var pack = null;
  try {
    pack = (require(Path.join(root, 'package.json'))).katana;
  } catch(error) {}

  var i = 0;
  for (var name in modules) {
    var module = modules[name];
    var regexp = new RegExp(query, 'ig');

    if (regexp.test(name) || regexp.test(module.description)) {
      var installed = pack && pack.modules[name]!==undefined;
      var enabled   = pack && pack.modules[name]!==undefined && pack.modules[name].enabled;

      meta.total++;
      module.tags.reverse();
      installed && meta.installed++;
      enabled && meta.enabled++;

      var url = module.url || (['https://github.com', module.github.username, module.github.repository, 'tarball', module.tags[0] || 'master'].join('/'));

      console.log('\n  #'.grey + ++i, name, (installed ? '■installed'.blue : '') + (enabled ? ' ■enabled'.green : ''));
      console.log('      title:'.grey, module.description);
      console.log('     author:'.grey, module.author.name, '<'+ module.author.email +'>');
      console.log('        url:'.grey, url);
      console.log('       tags:'.grey, module.tags.length ? module.tags.join(' ■ ') : 'master');
    }
  }

  console.log(!meta.total ? '\n  **No modules found which match "'.grey+ query +'"**\n'.grey : '');
  !meta.total && console.log('  Tip:'.blue +' run "'.grey +'katana modules update'.green +'" - to update modules list and info.'.grey, '\n');
});

App.command('update')
.description('update modules list and info')
.action(function() {
  var url = 'https://raw.github.com/Shogun147/Katana/master/modules.json';

  console.log('  Downloading:', url);
  request({ url: url, timeout: 5000 })
  .on('response', function(response) {
    if (response.statusCode!==200 && response.statusCode!==304) {
      throw new AppError('Request failed with status code '+ response.statusCode.toString().blue +'!');
    }

    this.pipe(Fs.createWriteStream(modRoot + 'modules.json')
    .on('finish', function() {
      console.log('  Done!'.green, 'Run', '"katana modules"'.blue, 'to list modules.');
    })).on('error', function(error) {
      throw new AppError('Updating failed with '+ (error.message || error.toString).yellow +'.');
    });
  }).on('error', function(error) {
    throw new AppError(error.code === 'ETIMEDOUT' ? 'Request timeout!' : 'Request failed with '+ error.code.yellow +'!');
  });
});

App.command('install <name> [url]')
.description('install or reinstall application module')
.action(function(name, url) {
  var ProgressBar = require('progress');
  var req         = null;
  var username    = null;
  var version     = null;

  try {
    var pack = require(Path.join(root, 'package')).katana;
    !pack.modules && (pack.modules = {});
  } catch(error) {
    throw new AppError('Not a Katana application!');
  }

  if ((!url || !check(url, 'isUrl')) && name.indexOf('@') !== -1) {
    name    = name.split('@');
    version = name[1];
    name    = name[0];

    if (!semver.valid(version)) {
      throw new AppError('Invalid version!');
    }
  }

  if (url && !check(url, 'isUrl')) {
    if (url.indexOf(':') === -1) {
      throw new AppError('Invalid url or Github username:repository!')
    }

    var repository = url.split(':');
    username       = repository[0];
    repository     = repository[1];

    if (!repository) {
      throw new AppError('Invalid repository name!');
    }

    if (repository.indexOf('@') !== -1) {
      version    = repository.split('@')[1];
      repository = repository.split('@')[0];

      if (!semver.valid(version)) {
        throw new AppError('Invalid version!');
      }
    }

    url = ['https://github.com', username, repository, 'tarball', version || 'master'].join('/');
  }

  var isFile = false;

  async.series([
    function(next) {
      if (!pack.modules[name]) { return next(); }

      confirm('  Warning: '.yellow + 'This module is already installed, do you want to replace it? ', function(error, ok) {
        if (!ok) { process.exit(); }

        var isFile = !Fs.existsSync(Path.join(root, 'modules', name));
        remove(Path.join(root, 'modules', name + (isFile ? '.js' : '')), next);
      });
    },
    function(next) {
      if (!username && !url && !modules[name]) {
        return next('Module '+ name.blue +' not found!');
      }

      if (!username && !url) {
        var module = modules[name];
        if (version && module.tags.indexOf(version) === -1) {
          return next('There\'s no '+ version.blue +' version for module '+ name.blue +'!');
        }
        if (!version && module.tags.length) {
          version = module.tags.pop();
        }
        if (module.url) {
          url = module.url.replace(':version', version || 'master');
        } else {
          url = ['https://github.com', module.github.username, module.github.repository, 'tarball', version || 'master'].join('/');
        }
      }

      next();
    },
    function(next) {
      mkdir(Path.join(root, 'temp', 'modules', name), 0777, next);
    },
    function(next) {
      console.log('  Downloading:', url.blue);
      req = request({ url: url, timeout: 10000 })
      .on('error', function(error) {
        next(error.code==='ETIMEDOUT' ? 'Request timeout!' : error);
      })
      .on('response', function(response) {
        if (response.statusCode !== 200 && response.statusCode !== 304) {
          this.abort();
          return next('Module request failed! Server responded with '+ response.statusCode.toString().blue +'.');
        }

        if (response.headers['content-type'] !== 'application/x-gzip') {
          this.abort();
          return next('Module request failed! Unexpected content type, module must be gzipped tar-ball.');
        }

        var length = parseInt(response.headers['content-length'], 10);
        if (!isNaN(length)) {
          var Bar = new ProgressBar('               :etas'.blue +' [:bar] ' + ':percent'.green, {
            complete: '=',
            incomplete: ' ',
            width: 30,
            total: length
          });

          req.on('data', function(chunk) {
            Bar.tick(chunk.length);
          });
        }

        function abort() {
          req.abort();
          next('Extracting failed!');
        }

        var zlibStream = zlib.createUnzip();
        var tarStream  = tar.Extract({ path: Path.join(root, 'temp', 'modules', name) });

        zlibStream.on('error', abort);
        tarStream.on('error', abort).on('end', next);

        req.pipe(zlibStream);
        zlibStream.pipe(tarStream);
      });
    },
    function(next) {
      var path = Path.join(root, 'temp', 'modules', name);
      Fs.readdir(path, function(error, item) {
        if (error || !item.length) { return next(error || 'Extracting failed or module archive empty.'); }

        isFile = Path.extname(item[0]) === '.js';

        move(Path.join(path, item[0]), Path.join(root, 'modules', name + (isFile ? '.js' : '')), next);
      });
    },
    function(next) {
      remove(Path.join(root, 'temp', 'modules', name), function(error) {
        if (error) { console.log('Error: Failed to remove temp directory!'); }

        next();
      });
    },
    function(next) {
      if (isWin) { return next(); }

      var path = Path.join(root, 'modules', name, 'hooks');

      Fs.readdir(path, function(error, hooks) {
        if (error) { return next(error.code==='ENOENT' ? null : error); }

        async.each(hooks, function(hook, cb) {
          Fs.chmod(Path.join(path, hook), 0755, function(error) {
            if (error) {
              console.log('  Warning:'.yellow, 'Failed to make hook '+ hook.blue +' executable!');
            }

            cb();
          });
        }, next);
      });
    },
    function(next) {
      if (isFile) { return next(); }

      var Npm = require('npm');
      Npm.load({ prefix: Path.join(root, 'modules', name) }, function(error, npm) {
        if (error) { return next(error); }
        
        npm.commands.install(next);
      });
    },
    function(next) {
      runHook('install', name, function(code, signal) {
        if (code) {
          // TODO: need some more descriptive message here
          console.log('  Warning:'.yellow, 'Install hook exited with code', code.blue +'!');
        }

        next();
      });
    },
    function(next) {
      var pack = require(root + 'package.json');

      pack.katana.modules[name] = {
        version: version || 'master',
        enabled: false
      };

      Fs.writeFile(root +'package.json', JSON.stringify(pack, null, 2), function(error) {
        if (error) {
          console.log('  Warning:'.yellow, 'Failed to update package.json file with new installed module.');
        }

        next();
      });
    }
  ], function(error) {
    if (error) {
      if (error instanceof Error) {
        throw error;
      } else { throw new AppError(error); }
    }

    console.log('  Done!'.green, 'Module', name.blue, 'installed!');
    console.log('  Run', '"katana module enable '.blue+ name.blue +'"'.blue, 'to enable this module.');

    // find where we still have stdin opened
    process.stdin.pause();
  });
});

App.command('enable <name>')
.description('enable module')
.action(function(name) {
  toggleModule(name, 'enable');
});

App.command('disable <name>')
.description('disable module')
.action(function(name) {
  toggleModule(name, 'disable');
});

function toggleModule(name, action) {
  var pack = require(root + 'package.json');

  if (!pack.katana.modules[name]) {
    throw new AppError('This module is not installed!');
  }

  runHook(action, name, function(code) {
    if (code) {
      console.log('  Warning:'.yellow, action +' hook exited with code', code.toString().blue +'!');
    }

    pack.katana.modules[name].enabled = action === 'enable';

    Fs.writeFile(root + 'package.json', JSON.stringify(pack, null, 2), function(error) {
      if (error) { throw error; }

      console.log('Done! Module', name.blue, 'now', (action==='enable' ? 'enabled'.green : 'disabled'.yellow) +'.');
    });
  });
}

App.command('uninstall <name>')
.description('uninstall module')
.action(function(name) {
  var pack = require(root + 'package.json');

  if (!pack.katana.modules[name]) {
    throw new AppError('This module is not installed!');
  }

  runHook('uninstall', name, function(code) {
    if (code) {
      console.log('  Warning:'.yellow, 'Uninstall hook exited with code', code.toString().blue +'!');
    }

    var isFile = !Fs.existsSync(Path.join(root, 'modules', name));
    remove(Path.join(root, 'modules', name + (isFile ? '.js' : '')), function(error) {
      if (error) {
        console.log('  Warning:'.yellow, 'Error removing module directory.');
      }

      delete pack.katana.modules[name];

      Fs.writeFile(root + 'package.json', JSON.stringify(pack, null, 2), function(error) {
        console.log('  Done!'.green, 'Module', name.blue, 'uninstalled!');
      });
    });
  });
});

function runHook(hook, module, next) {
  hook = Path.join(root, 'modules', module, 'hooks', hook);
  hook = Fs.existsSync(hook) ? hook : (Fs.existsSync(hook +'.js') ? hook +'.js' : null);

  if (!hook) { return next(); }

  var hookProc = spawn(node, [hook], {
    cwd: root,
    stdio: 'inherit'
  });

  var done = false;
  hookProc.on('close', function(code, signal) {
    done ? process.exit() : next(code, signal);
  });

  ['SIGINT', 'SIGTERM', 'SIGHUP', 'SIGQUIT'].forEach(function(signal) {
    process.on(signal, function() {
      done = true;
      hookProc && hookProc.kill(signal);
    });
  });
}

if (process.argv[2] === 'remove') {
  process.argv[2] = 'uninstall';
}

App.parse(process.argv);
