#!/usr/bin/env node

var Path = require('path');

var spawn = require('child_process').spawn;

var node    = process.execPath;
var root    = process.cwd() + Path.sep;
var modRoot = Path.join(__dirname, '..') + Path.sep;
var eol     = require('os').EOL;
var sep     = Path.sep;

require('colors');

var App = require('commander');

App.version(require('../package').version);
App.usage('<command> [options]');

App.on('--help', function() {
  console.log([
    '  Commands:'+ eol,
    'new|create|init [path]            create new katana application',
    'modules                           list available modules',
    'modules update                    update modules list',
    'modules search <str>              search modules',
    'module install <name> [url]       install module',
    'install <name> [url]              shortcut for "module install"',
    'module enable <name>              enable module',
    'module disable <name>             disable module',
    'module uninstall|remove           uninstall module',
    'controller|ctrl <name> [methods]  generate new controller, optional actions list',
    'start                             start application cluster',
    eol
  ].join(eol +'    '));
});

App.parse(process.argv);

!App.args.length && App.help();

var args    = process.argv.slice(3);
var command = App.args.shift();

if (command === 'module') {
  command = 'modules';
} else if (command === 'install') {
  args.unshift('install');
  command = 'modules';
} else if (command==='create' || command==='init' || command==='new') {
  args.unshift('create');
  command = 'create';
} else if (command==='controller' || command==='ctrl') {
  args.unshift('controller');
  command = 'generate';
}

if (['create', 'modules', 'generate', 'start'].indexOf(command) === -1) {
  console.error('  Error:'.red, 'Unknown command. Run "katana --help" to list available commands!');
  process.exit(1);
}

if (command==='modules' && !App.args.length) {
  args.unshift('list');
}

var proc = spawn(node, [Path.join(modRoot, 'bin', command)].concat(args), {
  cwd: root,
  stdio: 'inherit'
});

proc.on('close', function(code, signal) {
  process.exit();
});

['SIGINT', 'SIGTERM', 'SIGHUP', 'SIGQUIT'].forEach(function(signal) {
  process.on(signal, function() {
    proc && proc.kill(signal);
  });
});
