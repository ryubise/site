{
  "name": "bloom-sql",
  "version": "0.0.2",
  "description": "Chained functions for building SQL strings for node-postgres.",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:bloomtime/bloom-sql-js.git"
  },
  "keywords": [
    "sql",
    "pg",
    "postgres"
  ],
  "author": {
    "name": "Tom Carden"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.3.0",
    "should": "~0.6.3"
  },
  "readme": "# What are you?\n\nI am an __overly simple__ library to make it a bit easier to build simple SQL statements for [node-postgres](https://github.com/brianc/node-postgres/) (affectionaly known as `pg`). I generate the `{ text: '...', values: [] }` objects that you typically pass to `client.query(...)`.\n\nIt gets tedious matching up `$1, $2` etc. and building the right kind of values array. My functions help you do this and get the place-holder numbers right, even for `UPDATE/SET/WHERE` and for `WHERE IN` clauses and Postgres `ARRAY[]` values which require a flattened array of arguments.\n\nI have some tests written in Mocha. Of course I could use more!\n\n_No really_. __Overly simple__. \n\n# Like what?\n\n```\nvar SQL = require('bloom-sql'),\n    INSERT = SQL.INSERT,\n    SELECT = SQL.SELECT,\n    UPDATE = SQL.UPDATE,\n    DELETE = SQL.DELETE;\n```\n\nSelecting stuff:\n\n```\n> SELECT().FROM('foo').WHERE({ a: [1,2,3], b: 4 });\n{ text: 'SELECT * FROM foo WHERE a IN ($1, $2, $3) AND b = $4',\n  values: [ 1, 2, 3, 4 ] }\n```\n\nDeleting stuff:\n\n```\n> DELETE('foo').WHERE({ a: 1, b: 2 });\n{ text: 'DELETE FROM foo WHERE a = $1 AND b = $2',\n  values: [ 1, 2 ] }\n```\n\nInserting stuff:\n\n```\n> INSERT('foo').VALUES({ a: null, b: null, c: null });\n{ text: 'INSERT INTO foo(a, b, c) VALUES($1, $2, $3)',\n  values: [ null, null, null ] }\n```\n\nUpdating stuff:\n\n```\n> UPDATE('foo').SET({ a: 1, b: 2, c: 3 }).WHERE({ d: 4, e: 5 }).RETURNING('*');\n{ text: 'UPDATE foo SET a = $1, b = $2, c = $3 WHERE d = $4 AND e = $5 RETURNING *',\n  values: [ 1, 2, 3, 4, 5 ] }\n```\n\n__This code does not talk to the database.__ Connect to `pg` as normal as pass one of the resulting query objects to the db to run it:\n\n```\nvar pg = require('pg'),\n    SELECT = require('bloom-sql').SELECT;\n\nvar db = new pg.Client('YOUR_DB_URL');\ndb.connect();\n\nvar query = SELECT('*').FROM('users').WHERE({id:1}).LIMIT(1);\ndb.query(query, function(err,results){\n  // ensure !err\n  // check results.rowCount === 1 \n  // do stuff with results.rows[0]\n});\n```\n\n# TODO\n\n * complex conjunctions `(a = 1 AND b = 2) OR (c = 3 AND d = 4)`\n * comparisons in where clauses `(a > 1 AND b < 2)`\n * any hint of `JOIN`, sub-select, etc.\n * the other 90% of SQL?\n * it would be nice to support Postgres `ARRAY` operators in `WHERE` clauses, but this probably requires a different way of doing `IN` queries. Right now:\n   * in `UPDATE` and `INSERT`, a JS Array `[1,2,3]` will be converted into a Postgres `ARRAY[$1,$2,$3]` and the values flattened appropriately for the prepared statement\n   * in `WHERE` clauses, a JS Array `[1,2,3]` will be converted into a SQL `IN ($1,$2,$3)` and  the values flattened appropriately for the prepared statement\n\n# Installation\n\n`npm install bloom-sql --save`\n\n(`--save` automatically updates your `package.json` file, tell your friends)\n\n\n# License\n\n(The MIT License)\n\nCopyright (c) 2011-2012 Bloom Studio, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bloomtime/bloom-sql-js/issues"
  },
  "homepage": "https://github.com/bloomtime/bloom-sql-js",
  "_id": "bloom-sql@0.0.2",
  "_from": "bloom-sql@"
}
